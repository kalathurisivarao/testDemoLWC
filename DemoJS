import { LightningElement,wire} from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { createRecord } from 'lightning/uiRecordApi';
//import { getPickListValues } from 'lightning/uiObjectInfoApi';
import RESOURCE_OBJECT from '@salesforce/schema/Resource__c';
import AVAILABILITY_IN from '@salesforce/schema/Resource__c.Availability_in__c';

import { getPicklistValues } from 'lightning/uiObjectInfoApi';
import { getObjectInfo } from 'lightning/uiObjectInfoApi';

export default class TestDemoLWC extends LightningElement {
    resAvailabilityIn;
    //availabilityInoptions;

    @wire(getObjectInfo, {
        objectApiName: RESOURCE_OBJECT
    })
    resObj;

    @wire(getPicklistValues,
        {
            recordTypeId: '$resObj.data.defaultRecordTypeId',
            fieldApiName: AVAILABILITY_IN
        })
        resAvaiInValues;

    // @wire(getPickListValues,{objectApiName: RESOURCE_OBJECT, fieldApiName: AVAILABILITY_IN })
    // wiredAvailabilityIn({error,data}){
    //     if(data){
    //         this.availabilityInoptions = data.values;
    //     }else if(error){
    //         console.error(error);
    //     }
    // }

    handleAvailabilityInChange(event){
        this.resAvailabilityIn = event.detail.value;
    }

    handleSaveClick(){
        const fields = {};
        console.log('beforeClick:'+fields);
        fields[AVAILABILITY_IN.fieldApiName] = this.resAvailabilityIn;
        console.log('AfterClick:'+fields);

        const recordInput = { apiName: RESOURCE_OBJECT.objectApiName,fields};
        createRecord(recordInput)
        .then(()=>{
            console.log('before In Loop: '+this.skillSetRes);
            this.resAvailabilityIn = '';
            console.log('After In Loop: '+this.skillSetRes);
            const evt = new ShowToastEvent({
                title:'Resource Saved',
                message:'Resource Saved Successfully',
                variant:'success',
            });
            this.dispatchEvent(evt);
        })
        .catch(error=>{
            console.error(error);
            const evt = new ShowToastEvent({
                title:'Resource Not Saved',
                message: error.body.message,
                variant:'error',
            });
            this.dispatchEvent(evt);
        })
    }
}
